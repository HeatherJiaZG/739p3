/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Client_H
#define Client_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "service_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ClientIf {
 public:
  virtual ~ClientIf() {}
  virtual void read(std::string& _return, const int64_t addr) = 0;
  virtual int32_t write(const int64_t addr, const std::string& content) = 0;
};

class ClientIfFactory {
 public:
  typedef ClientIf Handler;

  virtual ~ClientIfFactory() {}

  virtual ClientIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientIf* /* handler */) = 0;
};

class ClientIfSingletonFactory : virtual public ClientIfFactory {
 public:
  ClientIfSingletonFactory(const ::std::shared_ptr<ClientIf>& iface) : iface_(iface) {}
  virtual ~ClientIfSingletonFactory() {}

  virtual ClientIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ClientIf> iface_;
};

class ClientNull : virtual public ClientIf {
 public:
  virtual ~ClientNull() {}
  void read(std::string& /* _return */, const int64_t /* addr */) {
    return;
  }
  int32_t write(const int64_t /* addr */, const std::string& /* content */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Client_read_args__isset {
  _Client_read_args__isset() : addr(false) {}
  bool addr :1;
} _Client_read_args__isset;

class Client_read_args {
 public:

  Client_read_args(const Client_read_args&);
  Client_read_args& operator=(const Client_read_args&);
  Client_read_args() : addr(0) {
  }

  virtual ~Client_read_args() noexcept;
  int64_t addr;

  _Client_read_args__isset __isset;

  void __set_addr(const int64_t val);

  bool operator == (const Client_read_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const Client_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Client_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Client_read_pargs {
 public:


  virtual ~Client_read_pargs() noexcept;
  const int64_t* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Client_read_result__isset {
  _Client_read_result__isset() : success(false) {}
  bool success :1;
} _Client_read_result__isset;

class Client_read_result {
 public:

  Client_read_result(const Client_read_result&);
  Client_read_result& operator=(const Client_read_result&);
  Client_read_result() : success() {
  }

  virtual ~Client_read_result() noexcept;
  std::string success;

  _Client_read_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Client_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Client_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Client_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Client_read_presult__isset {
  _Client_read_presult__isset() : success(false) {}
  bool success :1;
} _Client_read_presult__isset;

class Client_read_presult {
 public:


  virtual ~Client_read_presult() noexcept;
  std::string* success;

  _Client_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Client_write_args__isset {
  _Client_write_args__isset() : addr(false), content(false) {}
  bool addr :1;
  bool content :1;
} _Client_write_args__isset;

class Client_write_args {
 public:

  Client_write_args(const Client_write_args&);
  Client_write_args& operator=(const Client_write_args&);
  Client_write_args() : addr(0), content() {
  }

  virtual ~Client_write_args() noexcept;
  int64_t addr;
  std::string content;

  _Client_write_args__isset __isset;

  void __set_addr(const int64_t val);

  void __set_content(const std::string& val);

  bool operator == (const Client_write_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const Client_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Client_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Client_write_pargs {
 public:


  virtual ~Client_write_pargs() noexcept;
  const int64_t* addr;
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Client_write_result__isset {
  _Client_write_result__isset() : success(false) {}
  bool success :1;
} _Client_write_result__isset;

class Client_write_result {
 public:

  Client_write_result(const Client_write_result&);
  Client_write_result& operator=(const Client_write_result&);
  Client_write_result() : success(0) {
  }

  virtual ~Client_write_result() noexcept;
  int32_t success;

  _Client_write_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Client_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Client_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Client_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Client_write_presult__isset {
  _Client_write_presult__isset() : success(false) {}
  bool success :1;
} _Client_write_presult__isset;

class Client_write_presult {
 public:


  virtual ~Client_write_presult() noexcept;
  int32_t* success;

  _Client_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientClient : virtual public ClientIf {
 public:
  ClientClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void read(std::string& _return, const int64_t addr);
  void send_read(const int64_t addr);
  void recv_read(std::string& _return);
  int32_t write(const int64_t addr, const std::string& content);
  void send_write(const int64_t addr, const std::string& content);
  int32_t recv_write();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ClientIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClientProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientProcessor(::std::shared_ptr<ClientIf> iface) :
    iface_(iface) {
    processMap_["read"] = &ClientProcessor::process_read;
    processMap_["write"] = &ClientProcessor::process_write;
  }

  virtual ~ClientProcessor() {}
};

class ClientProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientProcessorFactory(const ::std::shared_ptr< ClientIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ClientIfFactory > handlerFactory_;
};

class ClientMultiface : virtual public ClientIf {
 public:
  ClientMultiface(std::vector<std::shared_ptr<ClientIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientMultiface() {}
 protected:
  std::vector<std::shared_ptr<ClientIf> > ifaces_;
  ClientMultiface() {}
  void add(::std::shared_ptr<ClientIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void read(std::string& _return, const int64_t addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, addr);
    }
    ifaces_[i]->read(_return, addr);
    return;
  }

  int32_t write(const int64_t addr, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write(addr, content);
    }
    return ifaces_[i]->write(addr, content);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ClientConcurrentClient : virtual public ClientIf {
 public:
  ClientConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ClientConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void read(std::string& _return, const int64_t addr);
  int32_t send_read(const int64_t addr);
  void recv_read(std::string& _return, const int32_t seqid);
  int32_t write(const int64_t addr, const std::string& content);
  int32_t send_write(const int64_t addr, const std::string& content);
  int32_t recv_write(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
