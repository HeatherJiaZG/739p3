/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PrimaryBackup_H
#define PrimaryBackup_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "service_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PrimaryBackupIf {
 public:
  virtual ~PrimaryBackupIf() {}
  virtual int32_t heartbeat(const int32_t msg) = 0;
  virtual int32_t sync(const std::vector<int64_t> & addr, const std::vector<std::string> & content) = 0;
};

class PrimaryBackupIfFactory {
 public:
  typedef PrimaryBackupIf Handler;

  virtual ~PrimaryBackupIfFactory() {}

  virtual PrimaryBackupIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PrimaryBackupIf* /* handler */) = 0;
};

class PrimaryBackupIfSingletonFactory : virtual public PrimaryBackupIfFactory {
 public:
  PrimaryBackupIfSingletonFactory(const ::std::shared_ptr<PrimaryBackupIf>& iface) : iface_(iface) {}
  virtual ~PrimaryBackupIfSingletonFactory() {}

  virtual PrimaryBackupIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PrimaryBackupIf* /* handler */) {}

 protected:
  ::std::shared_ptr<PrimaryBackupIf> iface_;
};

class PrimaryBackupNull : virtual public PrimaryBackupIf {
 public:
  virtual ~PrimaryBackupNull() {}
  int32_t heartbeat(const int32_t /* msg */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t sync(const std::vector<int64_t> & /* addr */, const std::vector<std::string> & /* content */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _PrimaryBackup_heartbeat_args__isset {
  _PrimaryBackup_heartbeat_args__isset() : msg(false) {}
  bool msg :1;
} _PrimaryBackup_heartbeat_args__isset;

class PrimaryBackup_heartbeat_args {
 public:

  PrimaryBackup_heartbeat_args(const PrimaryBackup_heartbeat_args&);
  PrimaryBackup_heartbeat_args& operator=(const PrimaryBackup_heartbeat_args&);
  PrimaryBackup_heartbeat_args() : msg(0) {
  }

  virtual ~PrimaryBackup_heartbeat_args() noexcept;
  int32_t msg;

  _PrimaryBackup_heartbeat_args__isset __isset;

  void __set_msg(const int32_t val);

  bool operator == (const PrimaryBackup_heartbeat_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const PrimaryBackup_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrimaryBackup_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PrimaryBackup_heartbeat_pargs {
 public:


  virtual ~PrimaryBackup_heartbeat_pargs() noexcept;
  const int32_t* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PrimaryBackup_heartbeat_result__isset {
  _PrimaryBackup_heartbeat_result__isset() : success(false) {}
  bool success :1;
} _PrimaryBackup_heartbeat_result__isset;

class PrimaryBackup_heartbeat_result {
 public:

  PrimaryBackup_heartbeat_result(const PrimaryBackup_heartbeat_result&);
  PrimaryBackup_heartbeat_result& operator=(const PrimaryBackup_heartbeat_result&);
  PrimaryBackup_heartbeat_result() : success(0) {
  }

  virtual ~PrimaryBackup_heartbeat_result() noexcept;
  int32_t success;

  _PrimaryBackup_heartbeat_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PrimaryBackup_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PrimaryBackup_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrimaryBackup_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PrimaryBackup_heartbeat_presult__isset {
  _PrimaryBackup_heartbeat_presult__isset() : success(false) {}
  bool success :1;
} _PrimaryBackup_heartbeat_presult__isset;

class PrimaryBackup_heartbeat_presult {
 public:


  virtual ~PrimaryBackup_heartbeat_presult() noexcept;
  int32_t* success;

  _PrimaryBackup_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PrimaryBackup_sync_args__isset {
  _PrimaryBackup_sync_args__isset() : addr(false), content(false) {}
  bool addr :1;
  bool content :1;
} _PrimaryBackup_sync_args__isset;

class PrimaryBackup_sync_args {
 public:

  PrimaryBackup_sync_args(const PrimaryBackup_sync_args&);
  PrimaryBackup_sync_args& operator=(const PrimaryBackup_sync_args&);
  PrimaryBackup_sync_args() {
  }

  virtual ~PrimaryBackup_sync_args() noexcept;
  std::vector<int64_t>  addr;
  std::vector<std::string>  content;

  _PrimaryBackup_sync_args__isset __isset;

  void __set_addr(const std::vector<int64_t> & val);

  void __set_content(const std::vector<std::string> & val);

  bool operator == (const PrimaryBackup_sync_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const PrimaryBackup_sync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrimaryBackup_sync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PrimaryBackup_sync_pargs {
 public:


  virtual ~PrimaryBackup_sync_pargs() noexcept;
  const std::vector<int64_t> * addr;
  const std::vector<std::string> * content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PrimaryBackup_sync_result__isset {
  _PrimaryBackup_sync_result__isset() : success(false) {}
  bool success :1;
} _PrimaryBackup_sync_result__isset;

class PrimaryBackup_sync_result {
 public:

  PrimaryBackup_sync_result(const PrimaryBackup_sync_result&);
  PrimaryBackup_sync_result& operator=(const PrimaryBackup_sync_result&);
  PrimaryBackup_sync_result() : success(0) {
  }

  virtual ~PrimaryBackup_sync_result() noexcept;
  int32_t success;

  _PrimaryBackup_sync_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PrimaryBackup_sync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PrimaryBackup_sync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrimaryBackup_sync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PrimaryBackup_sync_presult__isset {
  _PrimaryBackup_sync_presult__isset() : success(false) {}
  bool success :1;
} _PrimaryBackup_sync_presult__isset;

class PrimaryBackup_sync_presult {
 public:


  virtual ~PrimaryBackup_sync_presult() noexcept;
  int32_t* success;

  _PrimaryBackup_sync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PrimaryBackupClient : virtual public PrimaryBackupIf {
 public:
  PrimaryBackupClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PrimaryBackupClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t heartbeat(const int32_t msg);
  void send_heartbeat(const int32_t msg);
  int32_t recv_heartbeat();
  int32_t sync(const std::vector<int64_t> & addr, const std::vector<std::string> & content);
  void send_sync(const std::vector<int64_t> & addr, const std::vector<std::string> & content);
  int32_t recv_sync();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PrimaryBackupProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<PrimaryBackupIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PrimaryBackupProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PrimaryBackupProcessor(::std::shared_ptr<PrimaryBackupIf> iface) :
    iface_(iface) {
    processMap_["heartbeat"] = &PrimaryBackupProcessor::process_heartbeat;
    processMap_["sync"] = &PrimaryBackupProcessor::process_sync;
  }

  virtual ~PrimaryBackupProcessor() {}
};

class PrimaryBackupProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PrimaryBackupProcessorFactory(const ::std::shared_ptr< PrimaryBackupIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< PrimaryBackupIfFactory > handlerFactory_;
};

class PrimaryBackupMultiface : virtual public PrimaryBackupIf {
 public:
  PrimaryBackupMultiface(std::vector<std::shared_ptr<PrimaryBackupIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PrimaryBackupMultiface() {}
 protected:
  std::vector<std::shared_ptr<PrimaryBackupIf> > ifaces_;
  PrimaryBackupMultiface() {}
  void add(::std::shared_ptr<PrimaryBackupIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t heartbeat(const int32_t msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartbeat(msg);
    }
    return ifaces_[i]->heartbeat(msg);
  }

  int32_t sync(const std::vector<int64_t> & addr, const std::vector<std::string> & content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sync(addr, content);
    }
    return ifaces_[i]->sync(addr, content);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PrimaryBackupConcurrentClient : virtual public PrimaryBackupIf {
 public:
  PrimaryBackupConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  PrimaryBackupConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t heartbeat(const int32_t msg);
  int32_t send_heartbeat(const int32_t msg);
  int32_t recv_heartbeat(const int32_t seqid);
  int32_t sync(const std::vector<int64_t> & addr, const std::vector<std::string> & content);
  int32_t send_sync(const std::vector<int64_t> & addr, const std::vector<std::string> & content);
  int32_t recv_sync(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
